GHI CHÚ
	- Để dấu chấm phẩy hay k thì vẫn chạy đc nhưng nếu k để dấu chấm phẩy thì k để các câu lệnh trên cùng một dòng dc
	- Cách comments trong JS (tương tự C++)
		+ Comments 1 dòng: //
		+ Comments nhiều dòng: /*	*/
<==========>
CÁC CÂU LỆNH
var fullName = 'Ngon Ngoc Phat';	[Đặt biến]

alert(fullName);	[Hàm đặt thông báo] *nếu 2 hàm alert đặt cạnh nhau thì sẽ chạy từng cái một

<==========>

Một số hàm Built-in:
	1. Alert
		alert(fullName);	[Hàm đặt thông báo] *nếu 2 hàm alert đặt cạnh nhau thì sẽ chạy từng cái một
	2. Console
		console.log(giaTri)		[tương tự cout trong C++]
	3. Confirm
		confirm('Xác nhận gì đó')		[tạo ra hộp thoại xác minh/ xác nhận điều gì đó]
	4. Prompt
		prompt('xác nhận gì đó') 	[tạo ra hộp thoại input]
	5. Set timeout
		setTimeout(function () {

		}, )
		[Thực thi câu lệnh sau một khoảng thời gian]
	6. Set interval
		setInterval(function () {

		}, )
		[Thực thi câu lệnh liên tục sau một khoảng thời gian]

<==========>

Các loại toán tử:		[Y chang C++]
	1. Toán tử số học - Arithmetic
		var a = 1 + 2;
	2. Toán tử gán - Asignment
		var fullName = 'Ngon Ngoc Phat';
	3. Toán tử so sánh - Comparison
		var a = 1;
		var b = 3;
		if( a>=b){
			console.log('Đúng')
		}
	4. Toán tử logic - Logical
		var a = 1;
		var b = 2;
		if(a >= 0 && b > 0) {
			console.log('a & b lớn hơn 0');
		}

<==========>

Toán tử số học:		[Y chang C++]
	+	Cộng
	-	Trừ
	*	Nhân
	**	Lũy thừa
	/	Chia
	%	Chia lấy dư
	++	Tăng lên 1 đơn vị
	--	Giảm đi một đơn vị

<==========>

Toán tử gán
	Toán tử		Ví dụ		Tương đương
	=			x = y 		x = y
	+=			x += y 		x = x + y
	-=			x -= y 		x = x - y
	*= 			x *= y 		x = x * y
	/=			x /= y 		x = x / y
	**=			x **= y 	x = x ** y

<==========>

Nguyên lý hoạt động của ++ / -- TƯƠNG TỰ C++

<==========>

Toán tử nối chuỗi 	TƯƠNG TỰ C++

<==========>

Toán tử so sánh 	TƯƠNG TỰ C++

<==========>

Kiểu dữ liệu Boolean

<==========>

Toán tử logical		TƯƠNG TỰ C++

	1. && 	= AND
	2. ||	= OR
	3. !	= NOT

<==========>

Kiểu dữ liệu:
1. Dữ liệu nguyên thủy
	- Number
	- String
	- Boolean
	- Undefined
	- Null
	- Symbol
2. Dữ liệu phức tạp
	- Function
	- Object

<==========>

Toán tử logical và câu lệnh điều kiện If	SAME SAME C++

<==========>

Chuỗi		SAME SAME C++
 Khai báo chuỗi:
  var a = 'Hoc thi ngu, choi thi nhieu';

 Các thuộc tính và phương thức của chuỗi
	1. length	[Độ dài chuỗi]
		console.log(myString.length);

	2. find index	
		console.log(myString.indexOf('ABC'))	[Tìm ký tự trong chuỗi]	
		console.log(myString.search('ABC'))	[Tìm ký tự theo biểu thức chính quy]	

	3. Cut string
		console.log(myString.slice(3))		[Cắt chuỗi từ 3]
	
	4. Replace		[Tìm kiếm và thay thế chuỗi]
		console.log(myString.replace('Từ cần tìm', 'Từ cần thay thế')
		
	5. Convert to upper case 	[Viết hoa tất cả các chữ ]
		console.log(myString.toUpperCase())
	
	6. Convert to lower case 	[Viết thường tất cả các chữ ]
		console.log(myString.toLowerCase())

	7. Trim 	[Xóa khoảng trắng trước chuỗi]
		console.log(myString.trim())
	
	8. Split	[Dùng điểm chung để tách chuỗi thành array]
		console.log(myString.split(''))
		 	
	9. Get a character by index	[Lấy ký tự trong chuỗi]
		console.log(myString.charAt())
<==========>

Số và làm việc với số 	(JS number methods)
	1.To string	[Chuyển đổi kiểu number thành string]
		console.log(age.toString())

	2. To Fixed	[Làm tròn số]
		console.log(PI.toFixed())

<==========>

Mảng	(JS array methods)
	1.Cách tạo mảng
	var languages = [
		'PHP',
		'JS',
		'Python',
	];

	2. Kiểm tra array
	console.log(Array.isArray())

	3. Truy xuất mảng
	console.log(language[2])

<==========>

Làm việc với mảng:
	1. To String	[Chuyển dữ liệu sang chuỗi]
	console.log(language.toString())

	2. Join		[Chuyển dữ liệu sang array]
	console.log(language.join())

	3. Pop		[Xóa phần tử cuối mảng và trả lại phần tử đã xóa]
	console.log(language.pop())

	4. Push		[Thêm một hoặc nhiều phần tử cuối mảng và trả về độ dài mới]
	console.log(language.push())

	5. Shift	[Xóa phần tử đầu mảng và trả lại phần tử đã xóa]
	console.log(language.shift())

	6. Unshift 	[Thêm một hoặc nhiều phần tử đầu mảng và trả về độ dài mới]
	console.log(language.unshift())

	7. Splicing 	[Xóa, cắt, chèn phần tử vào mảng]
	language.splice("vị trí đặt trỏ", "số lượng phần tử muốn xóa", "phần tử muốn chèn vào (đặt trong dấu '') ")

	8. Concat 	[Nối mảng]
	console.log(language.concat())

	9. Slicing	[Cắt 1 hoặc toàn bộ element]
	console.log(language.slice())

<==========>

Hàm	
	Tạo hàm
	function showDialog() {
		alent('Hiiiii');
	}

	Cách gọi hàm:
	showDialog();

Tham số trong hàm
	function writeLog(message) {
		console.log(message)
	}
	*message là tham số

Return		[Trả về giá trị]
	function cong(a, b) {
		return a + b;
	}

	var result = cong(2, 8);

	console.log(result)
	

<==========>
Variable (biến) là nơi bạn có thể lưu trữ thông tin.
Một số cách khai báo:
	- let: cách khai báo thông dụng cho JS hiện tại
	VD:
		let thong_Bao;
		thong_Bao = 'Xin Chào';
		console.log(thong_Bao);

	- var: Một kiểu khai báo cũ
	VD:
		var a = 1 + 2;

	- const: giống như cách khai báo let nhưng giá trị không thay đổi được
	VD:
		const pi = 3.14159265359;
		pi = 4;
 		console.log(pi);
<==========>

Đối tượng toán học trong JS

1.abs()		(Trả về giá trị tuyệt đối của một số)
	var b = Math.abs(-8.75); //Trả về 8.75
2. random()		Trả về một số ngẫu nhiên trong khoảng từ 0 đến 1
    var a = Math.random();
    document.write(a + "<br>");
3. sqrt() 		Trả về căn bậc hai của một số
	var b = Math.sqrt(1);
4. pow() 		Trả về lũy thừa của hai số xác định
	var a = Math.pow(5,2);
5. ceil()		Làm tròn lên một số nguyên gần nó nhất
	var a = Math.floor(3.60);
	// 3.6 => 4 || 3.4 => 4 || -3.6 => -3 || -3.4 => -3 ||
6. floor()		Làm tròn một số xuống số nguyên gần nó nhất
	var a = Math.floor(3.60);
	// 3.6 => 3 || 3.4 => 3 || -3.6 => -4 || -3.4 => -4 ||
7. round()		Làm tròn một số đến số nguyên gần nó nhất
    var a = Math.round(3.60);
	//  3.6 => 4 || 3.4 => 3 || -3.6 => -4 || -3.4 => -3 ||
8. max() 		Trả về số lớn nhất trong danh sách
    var a = Math.max(0, 16, -3, 5.25, 100, -1); 
	//Trả về 100
9. min()		Trả về số nhỏ nhất trong danh sách
    var a = Math.min(0, 16, -3, 5.25, 100, -1); 
	//Trả về -3

<==========>

DOM

1. getElementById: Gán/gọi ID từ file HTML qua biến JS
	document.getElementById(elementID)
	VD:
		var change = document.getElementById('change');

2. getElementByClassName: Gán/gọi CLASS từ file HTML qua bên JS
	document.getElementByClassName(elementCLASS)
	VD:
		const contener2 = document.getElementsByClassName('contener2');

3. getElementByTagName: Gán/gọi các thẻ (<p></p>; <div></div>;...) từ file HTML qua JS
	document.getElementByClassName(element)
	VD:
		const p = document.getElementsByTagName('p');

4. Thay đổi các thuộc tính CSS bằng JavaScript
	Khai báo:
		(tên biến/hàm).style.(thuộc tính cần thay đổi) ;
	
	Một số thuộc tính cơ bản:
		style.color = "(color)";	
		style.backgroundColor = "(color)";
		style.height = "200px";
		style.width = "200px";
		style.border = "2px solid black";
		style.fontSize = "10px";
		style.textAlign = "center";
		
<==========>

IIFE

1. IIFE là gì?
	Là một biểu thức tạo ra một hàm mà hàm đó sẽ được gọi ngay lập tức
	Không có tính sử dụng lại 
2. VD IIFE:
(function() {
	console.log('Qua dinh')
})()

3. Một số lưu ý 
***Nên để dấu ";" trước IIFE

IIFE là hàm "private" (Không thể truy cập) nên được sử dụng khi muốn không cho người khác biết code của mình; nó sẽ không ảnh hưởng đến biến toàn cục (các thư viện thường dùng IIFE để tránh ảnh hưởng đến các biến của người dùng)

<==========>

SCOPE - Phạm vi

1. Các loại scope:
	- Global [Toàn cầu]
	- Code Block [Khối mã: let, const]
	- Local scope [Hàm: var function]

Lưu ý:
	- Mỗi lần gọi HÀM sẽ có 1 phạm vi mới được tạo ra
	- Các hàm có thể truy cập được các biến đã khai báo trong nó và ngoài phạm vi của nó

2. Khi nào một biến bị xóa
	- Biến toàn cầu: Khi tải lại trang web
	- Code block: Khi hàm hoặc biến được thực thi xong
	- Biến trong hàm được tham chiếu bởi một hàm khác (function in function): Không được xóa khỏi bộ nhớ


<==========>

Closure

1. Closure là gì?
	- Là một hàm có thể ghi nhớ nơi nó được tạo và truy cập được biến ở bên ngoài phạm vi của nó
   
2. Ứng dụng
	- Viết code ngắn gọn hơn
	- Biểu diễn, ứng dụng tính Private trong OOP

3. Lưu ý
	- Biến được tham chiếu (refer) trong closure sẽ không được xóa khỏi bộ nhớ khi hàm cha thực thi xong
	- Các khái niệm JS nâng cao rẩt dễ gây nhầm lẫn


<==========>

Hoisting

1. Khái niệm:
	- Nó sẽ đẩy phần khai báo lên phía trên, một biến có thể khai báo sau khi sử dụng

2. Lưu ý:
	- Chỉ có phần khai báo được đưa lên top, không phải phần giá trị
	- Phần khai báo hàm được đưa lên trước phần khai báo của biến


<==========>

Use strict AND strict mode

2. Cách sử dụng (chế độ nghiêm ngặt)
	Viết '"use strict";' trên đầu file JS
	

